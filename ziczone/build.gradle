plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.5'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'com.github.node-gradle.node' version '3.2.1'
}

group = 'org.zerock'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.security:spring-security-test'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation 'org.modelmapper:modelmapper:3.1.0'

	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'

	implementation 'org.springframework.boot:spring-boot-starter-mail'

	//	AWS S3 서비스를 사용하기 위한 라이브러리
	implementation 'com.amazonaws:aws-java-sdk-s3:1.11.238'
}

tasks.named('test') {
	useJUnitPlatform()
}

sourceSets {
	main {
		java {
			srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated"]
		}
	}
}

def querydslSrcDir = 'src/main/generated'
clean {
	delete file(querydslSrcDir)
}

tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

node {
	version = '16.13.0'
	npmVersion = '8.1.0'
	download = true
	workDir = file("${project.buildDir}/nodejs")
	npmWorkDir = file("${project.buildDir}/npm")
}

task cleanNpmCache(type: NpmTask) {
	args = ['cache', 'clean', '--force']
}

task appNpmInstall(type: NpmTask) {
	workingDir = file("${project.projectDir}/src/main/resources/static")
	args = ['install']
}

appNpmInstall.dependsOn(cleanNpmCache)
build.dependsOn(appNpmInstall)

tasks.withType(Test) {
	enabled = false
}
